What is Use Strict ?
JavaScript's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode".

What are the various ways to create JavaScript objects?
four ways 1.object create normal way 2.use constructor 3.using class 4.Object.create()

How can we do inheritance in JavaScript ?
JavaScript uses object inheritance or prototype inheritance. inheritance done using prototype object

How to detect if caps lock is on using JavaScript?
use the getModifierState() method of the KeyboardEvent event object.

What is class in ES6 ?
class is template of object

Differentiate between class and normal function ?
class is template function is to perform a task
class are not hoisted and functions are hoisted
Functions can be overwritten, whereas classes can be extended, but not overwritten

Differentiate between Arrow vs Normal Function ?
arrow function are syntactical shorter and more readability compares to normal function
In arrow functions can not bind this
No arguments object in arrow functions like normal functions passed parameters uses in function without pass args we use arguments
arrow functions not hoisted

what is a WebAPI/Browser API ?
Web API is an application programming interface for the Web

What will be the output of the following code snippet? (in operator)

const first = 2 in [1, 2]; // return false in array we have give index not value of index
const second = '2' in [0, 1, 2]; // return true
console.log("length" in first); // returns true (length is an Array property)
console.log(Symbol.iterator in first); // returns true
console.log(first, second); 

const myCar = { make: "Honda", model: "Accord", year: 1998 };
"make" in myCar; // returns true
"model" in myCar; // returns true

const color1 = new String("green"); // creating new string object
"length" in color1; // returns true

const color2 = "coral";
// generates an error (color2 is not a String object)
"length" in color2;

Canvas
Resolution dependent
No support for event handlers
Poor text rendering capabilities
You can save the resulting image as .png or .jpg
Well suited for graphic-intensive games

SVG
Resolution independent
Support for event handlers
Best suited for applications with large rendering areas (Google Maps)
Slow rendering if complex (anything that uses the DOM a lot will be slow)
Not suited for game applications

Execution context
 javascript is a synchronous single threaded language

As soon as the JavaScript program is run,The global execution context is created.
It has two phases, 
Phase 1, was the memory creation phase.
In the memory creation phase, we were allocating memory to all the variables and functions.

we allocated these variables undefined default
In case of functions literally it just stores the whole function. 
In the second phase,
the code execution phase, now the JS program is executed line by line, when code execute and encounters local variables replaced
and created memory and code components inside code execution. 
in memory creation phase it store variable in function with undefined when parameter has value it will replaces undefined with value.
And it will now invoke the function, in the code execution phase, again this whole thing is run,
the task and return statement is executed.
In the return statement, we take back the control over here,
now function is populated with a new value which is coming from this function invocation, which was the result.

And suppose if there was a function invocation inside the function, you would have created an execution context INSIDE an execution context over here,
and it can go to any deep level
call stack will handles everything to manage this execution context creation, deletion, and the control
Every time in the bottom of the stack we have our global execution context.
That means, whenever any JS program is run, this call stack is populated with this Global execution context.
Whenever a function is invoked, or a new execution context is created and pushed to stack,
we return the ans,Execution is popped out of the stack, and the control goes back to the global execution context, where it left.

Hoisting
The function statement and variable declared with var are accessible before they appear in the code
In hoisting the hoisted items are accessible in the scope they are declared in
Function expressions do not get hoisted
strict mode var not hoisted will give reference error but function will hoisted but inside function variables it will not hoisted
only declaration hoisted not assignment/initialization
execution context in memory phase Declarations will allocated to undefined

scope

block: we need write multiple statements open closed curly braces that is block

function statement vs function expression vs function declaration

statement: function statement(){} function with name
expression: var expression = function(){} function acts as variable value or var a=function z(){} also called named anonymous function
major difference these two is hoisting. expression not hoisted
declaration: function statement also known as function declaration
anonymous function: function(){} function without name. does't have identity. it will use function as value
arrow function: ()=>{}

first class function: function can be passed as argument to another function
function are first class functions or citizens of first class objects

Higher Order Function: A function that accepts a function as an argument and/or returns a function as its value.
callback function: function passed as a argument to another function it is first class function. it make asynchronous operation
EventListeners
Eventloop: event loop is a single-threaded loop used to manage the order in which asynchronous callbacks are executed
It allows asynchronous code to run without blocking subsequent synchronous code from executing.

async await vs promise
async is keyword used before a function to create
async function will always return a promise 

await is keyword that can only use in async function

difference of promise and async


const p= new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve("promise resolve after 10 sec")
    },10000)
})

function getData(){
  p.than((res)=>console.log(res))
  console.log(" it will print before promise resolve")
}
getData()
when execute promise it will print after 10 sec but console.log will print before promise resolve
async and await was different it will print in both same time

async function handlePromise(){
console.log("hello")
 
 // this major difference
  const val = await p; // before code will execute when JS Engine see await it will wait to promise resolve
  console.log("print what ever text with promise value")
  console.log(val);

  const val2 = await p; // if write two time await it will print both at time
  console.log("print what ever text with promise value2")
  console.log(val2);
}
handlePromise()

what happens if two async function call different times wait

const p1 = new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve("promise resolve after 10 sec")
    },10000)
})

const p2 = new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve("promise resolve after 10 sec")
    },5000)
})

async function handlePromise(){
console.log("hello")
 
  const val = await p1; 
  console.log("print what ever text with promise value")
  console.log(val);

  const val2 = await p2; 
  console.log("print what ever text with promise value2")
  console.log(val2);
}
handlePromise()

it will not print after 5 sec's it gone it will print after 10 sec all at time 
async function await the all promises resolve because first await wait 10 sec 

if we reverse the timing p1 will 5 sec and p2 will 10 sec than it will print 5 sec promise will first than p2 will print after 10 sec

what happens behind scenes
 JS Engine waiting for promise to resolve than it will execute. this wrong statement when JS Engine waits browser will unresponsive

as soon as we call this handlePromise function will come inside your call stack right now it will executing all of this one by one
will log hello to the console after it will see that there is a await P1 over here
JavaScript does not wait for anything and this handle promise function is execution will suspend
and this will move out of call stack once this P1 is resolved then in only in it will move handlePromise to call stack and 
will start executing from where it left p1 5sec same on p2 10sec

p1 10sec and p2 5sec this scenario

hello will be printed immediately right now this P1 is 10 seconds so handle promise was executing it saw that P1 is not resolved yet
P1 will resolve after after 10sec than move to next line print then p2 will resolve in 5 sec so by the time it moves over
here after 10 seconds it sees that P2 is
already resolved than it will move to next line quickly print after 10 seconds it will
print

real world examples9

using fetch api to get data
do use Async and await it will give more cleaner and wait for data to resolve

for error handling use try and catch block

this in call apply bind
 this is used to refer to the current object
 if the function spot with respective object it is going to point of name particular object else point to window object


 let personObj = {
  firstName: "John",
  lastName: "sin",
  fullNameF: function () {
    console.log(this);
  },
};

personObj.fullNameF(); // { firstName: 'John', lastName: 'Sin', fullNameF: [Function: fullNameF] } refers to current object

let winO = personObj.fullNameF; // function will print
winO(); //  refers to window object in non strict mode and strict mode it will print undefined

function inside() {
  log(this); // window object in non strict mode and strict mode undefined
}

console.log(this); //refers to window object always in global scope

call and apply is same for change the object reference but call will take arguments and apply will take arguments as array it happens strict/non-strict
bind will bind a function with respect to object and returns new function it will invoke any where.

// what happens this in async/callbacks

let personObj1 = {
  firstName: "John",
  lastName: "sin",
  fullNameF: function () {
    setTimeout(function () {
      console.log(this.firstName); //  if this refers to window object it will print undefined
    }, 1000);
    console.log(this); //if only this refers to current object
  },
  arrowF: function () {
    setTimeout(() => {
      console.log(this.firstName); //  if this refers to current object it will print firstName
    }, 1000);
  },
};

// personObj1.fullNameF();
// personObj1.arrowF();

// non-strict mode async callback with respect to window object in strict mode it is undefined

// what happens this in arrow functions
//arrow function at time creation this will automatically bind to the with respect to object where it is created

const obj2 = {
  a: 2,
  print: function () {    
    function innerPrint() {
      console.log(this.a); // undefined it refers to window object
    }
    innerPrint();
  },
  printThisValue: function () {
    let t = this; // if we assigns to this to a variable it will refer to current object
    function innerPrint() {
      console.log(t.a); // 2 will print
    }
    innerPrint();
  },
  arrowPrint: function () {
    const innerPrint = () => {
      console.log(this.a); // 2 at the time creation of arrow it refers to current obj
    };
    innerPrint();
  },
};

how events works

prototype
in javascript every function and object has its own property called prototype.
a prototype it self another object.so prototype has its own prototype. this creates prototype chain.
we can use prototype to add properties and methods to constructor function.
and objects inherit the properties and methods from a Prototype

function Person(fName,lName){
  this.fName=fName
  this.lName=lName
}

// if you want add properties or methods existing constructor Person do like


const person1=new Person("d","s")
const person2=new Person("da","sa")

Person.prototype.gender= "m"
Person.prototype.getFullName= function(){
  return this.fName+this.lName
}

// object is inheriting properties and methods of prototype

console.log(person2.getFullName())

function Person(){
  this.fName="fName"
  this.lName="lName"
}

 Person.prototype.age = 24

const person1=new Person()
Person.prototype.age=34  //it is override
Person.prototype = {age:55} // this way not replaceable
const person2=new Person()
if the prototype value changed than all objects will change
all previous value not changed



console.log(person1)
console.log(person2)

 
What is JSON?
it is data interchange  format that is commonly used in web applications.

datatype diff in JS
primitive datatype hold single value and immutable
non-primitive is reference and mutable

spread vs rest
spread operator used to expand iterable objects(array,string,object) ex: coping an array,merging arrays,passing multiple arguments
rest is used to get the remaining arguments of an iterable ex: func d(a,b,...rest){} d(1,2,3,4,5,6) 

what is type coercion in JS?
type coercion is the process of converting one data type to another data type.

what are array-like objects in JS?
string is array-like object in JS. we can use length,index. same way arguments,HTML collections also array-like objects.
we can convert array-like objects into array using spread operator and Array.from(arr) and Array.prototype.slice.call(arr)

what are Pure and Impure functions in JS?
Pure function is a function which returns the same result if given the same arguments. it has no side effects and not modify state
Impure function is a function which returns different results if given the same arguments. it has side effects and modify state

what is Function Currying in JS? 
transforming a function that takes multiple arguments into a sequence of functions that each take a single argument.
benefit of currying is that it is easy to compose functions and reusability and modularity

HTML VS DOM
HTML is a markup language used to create web pages. This language describes the HTML tree structure 
this is represented as a DOM that allows to dynamically change the content of the web page. 

what is the difference between innerHTML vs textContent?
innerHTML is used to insert HTML content into the element it renders a HTML tree structure. 
textContent is used to get or set the text content of an element.it render as text.

Error Handling in JS
try catch finally   

what is Error Propagation in JS?
error Propagation refers to the process of passing an error from one part of code to another by using the throw statement with try catch block.
try catch block should be used to handle errors. throw manually error

what are the different types of error in JS?
SyntaxError: occurs when there is a syntax error in the code.
console.log("syntax error"
referenceError: occurs when there is a reference error in the code.
console.log(myVar)
TypeError: occurs when there is converting one type to another type error in the code.
const n=23
console.log(n.toUpperCase())
RangeError:  range occurs if a number that is outside the range of 0 and 20 (or 21) is passed into toFixed(), toPrecision(), or toExponential() method.
console.log(45.2222.toFixed(-20))
RangeError: toFixed() digits argument must be between 0 and 100
    at Number.toFixed

shallow copy vs deep copy
shallow copy is copying the reference of the child object.
deep copy is copying the object and its properties.

Sets in JS
collections of unique values.

Map Object in JSvents in JS
it is special object that has key value pairs.
key value any-type of value
it maintains order of insertion key value pair.

map vs object
map is collection of key value pair.
object is collection of key value pair.
map is iterable.
object is not iterable.
map is ordered.
object is not ordered.
map is faster.
object is slower.

event loop
➤ Single-Threaded Execution:
JavaScript is single-threaded, which means it can only execute one task at a time. 
This is managed by the call stack, where functions are executed one by one.

➤ Call Stack: Think of the call stack as a stack of plates. 
Every time a function is invoked, a new plate (function) is added to the stack. 
When the function finishes, the plate is removed from the stack.

➤ Web APIs: For asynchronous operations like setTimeout, DOM events, and HTTP requests, JavaScript relies on Web APIs 
provided by the browser. These operations are handled outside of the call stack.


➤ Callback Queue: When an asynchronous operation completes, its callback is placed in the callback queue. 
This queue waits until the call stack is clear before pushing the next callback onto the stack.

➤ Event Loop: The event loop is like a manager that constantly checks if the call stack is empty. 
When it is, the event loop takes the first callback from the callback queue and adds it to the call stack.

➤ Microtasks Queue: There's also a microtasks queue for tasks like promises. 
This queue has higher priority than the callback queue. 
The event loop checks the microtasks queue first, ensuring these tasks are processed before other callbacks.

➤ Priority Handling: To sum it up, the event loop first checks the microtasks queue. 
If it's empty, it moves to the callback queue. 
This ensures that critical tasks, like promises, are handled promptly.
  
1. timer in react
2.Run Third-Party Scripts From A Web Worker
3. Implement offset pagination
deepClone of object compare
build a Sticky Notes application
Disadvantages of Virtual DOM?
Why virtual DOM is not used by other libraries and frameworks other than React?
Disadvantages of React?
Disadvantages of some CSS framework, why it is needed, he was expecting the justification.
Asked to write a custom hook to get the live data from the server, the endpoint was provided.
Difference between server state, app state and local state? Use cases for each?
Which the best way to implement server state?redux thunk vs tanstack query vs redux saga?
webpack configurations?
ssr vs spa?
serverless vs servers?
design youtube(Flipkart in 2022)
design WhatsApp(Walmart in 2022)
design BookMyShow(Flipkart in 2023)
design google calendar(Netomi in 2023) 

--Microsoft Machine coding design question 
Design an Email Client like MS Outlook.
Create a chat interface like MS teams.
Create a Notification interface like MS

HLD and LLD question
Design snake and ladders game.

show me a project on which is in the initial stage you worked earlier, 
and explain to me the complete architecture of the project and, what actions you have taken to scale up this project?