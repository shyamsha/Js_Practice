Why use react
It uses VDOM
It uses the component architecture
It uses a modularize component 
We can build complex UI easily
It has a view library only
it has vast community and ecosystem
it has reusability and composition
it uses declarative syntax
react hooks simplified ecosystem

VDOM disadvantages
Memory overhead:
Maintaining a separate VDOM requires memory, increasing the application's footprint.
Initial render overhead:
Creating and reconciling the VDOM during the initial render can be slower compared to direct DOM manipulation.
Complexity for VDOM concepts like reconciliation and diffing algorithm to understand
if applications with complex UIs or frequent updates performance issues rises. 
debugging DOM-related issues more challenging.

react disadvantages
it is view library not mvc architecture
Maintenance of application is hard if it is complex UI
Debugging challenges need more system resources
SEO challenges

What is the difference between state and props?
props are immutable and state is mutable
props are passed from parent to child and state is managed by component

reusability vs composition
reusability is create a component that can be used in multiple places. 
composition is combining reusable components together to build one big component. ex:App component

transpiler vs compiler
transpiler: converts code from one language to another language. ex: babel converts es6 to es5
compiler: converts code to machine readable format means high level programming language to low level machine code.

What is de-structure how can use arrays if the value change dynamic
de-structure is extract values from array/object and uses like variables

If two components shared the same username to display how will do in
saves in local storage

local storage vs session storage vs cookies
 	        Local Storage	    Session Storage	  Cookies
Capacity-->	5-10MB	          5MB	              4KB
Browsers-->	HTML 5	        HTML 5	          HTML 5 / HTML 4
Access      -->Any Window  Same Tab	      Any Window
performance--> synchronous  synchronous     asynchronous
Expiration-->	Never	On      Tab Close	      Manually Set 
Supported Data Types-->	String Only 	
Auto-expire Option-->	No	 Yes	             Yes
Storage Location-->	Browser Only	Browser Only	Browser and Server
Editable and Blockable by Users-->	Yes
SSL Support-->  	No	      No	                Yes

Which is better local storage or session storage?
If we want some data on the browser, we often utilize the local storage object. Cookies are used if we want them on the server.
session storage is used if we want to delete the data if the user closes that particular tab or the season

Is Async a sessionStorage?
No, localStorage and sessionStorage calls are synchronous

Position relative vs position absolute 
default value is static it's not effect layout
position: relative places an element relative to its current position without changing the layout around it, 
position: absolute places an element relative to its parent’s position and changing the layout around it.
position: fixed; is positioned relative to the viewport, stays same place
position: sticky; is positioned based on the user's scroll position.

Rules of hooks 
hooks can only be called inside functional component
hooks can be top level of component
hooks cannot be conditional

Npm vs yarn
NPM fetches packages from the online npm registry for every 'install' command
YARN stores dependencies locally in most cases and fetches packages from a local disk.

What are React hooks? Explain the difference between useState and useEffect.
React hooks are functions that allow you to maintaining state and lifecycle features in functional components. 
useState is used to manage state, while useEffect is used to handle side effects like fetching data or subscribing to events.

Use context API
props passed to several components. this leads to prop drilling. 
avoid prop drilling use contextAPI allows data to be passed through a component tree without having to pass props manually at every level
createContext:function returns an object with provider and consumer properties
Context API consists of two main components:  provider and consumer
The provider is responsible for creating and managing the context, which holds the data
the consumer is used to access the context and its data from provide component
 
Code Example:
const ThemeContext = createContext();

function App() {
 return (
 <ThemeContext.Provider value="dark">
 <Component />
 </ThemeContext.Provider>
 );
}

function Component() {
 const theme = useContext(ThemeContext);
 // Use theme value here
}


custom hook
when you have component logic to be used by multiple components. we can extract logic place in custom hook.
the hook start with name 'useFetch' 'useOnline'  like  
 
props.children
children are a special prop that is used to pass the data from the parent component to the children component 
but this data must be enclosed within the parent’s opening and closing tag.

const Picture = (props) => {
  return (
    <div>
      <img src={props.src}/>
      {props.children}
    </div>
  )
}

//App.js
render () {
  return (
    <div className='container'>
      <Picture key={picture.id} src={picture.src}>
          //what is placed here is passed as props.children  
      </Picture>
    </div>
  )
}

How can you optimize performance in a React application? Discuss techniques like memoization, code splitting, and lazy loading.
Performance optimization techniques include memoization with useMemo for avoid unnecessary recalculations, 
code splitting to split the bundle into smaller chunks we can use webpack and load components when needed. we can use lay loading and Suspense
react.lazy is function that allows you to load component lazily. it enables code splitting to import component asynchronous/dynamically.
Suspense is used to define loading state and render fallback UI while component is loading.
pros and cons of code splitting
faster initial loading, optimized bandwidth usage,improve caching, parallel loading,easier maintaining
complexity, tooling dependency, potential for run time errors,increased number of requests

useCallback and useMemo
useCallback and useMemo are both React Hooks that help optimize the performance of a React application by memoizing technique.

When you define a function inside a component, it is recreated on every render, even if the component’s state or props have not changed. 
This can lead to unnecessary re-renders, which can slow down your application’s performance. 
The useCallback hook helps you avoid this problem by memoizing the function and only recreating it when necessary.
When you need to pass a function as props to a child component.
If you have a function that is expensive to compute and you need to call it in multiple places.
When dealing with functional components.
When you are working with a function that relies on external data or state.
The useCallback hook takes two arguments: a function and a dependency array. 
It will return a memoized version of the function that only changes if one of the dependencies has changed.
useMemo is used to memoize values or computations, helping to optimize expensive calculations or data transformations.u
useCallback returns a memoized callback function, while useMemo returns a memoized value.
useCallback(callback, dependencies)

What is the hook? Life cycle methods vs hooks
React hooks are functions that allow you to use state and lifecycle features in functional components. 
Hooks can be stateful and can manage side effects. React hooks provide a more concise way to manage state and side effects in functional components. 
Lifecycle methods are only available in class components

functional components vs class Components
A functional component is just a plain JavaScript pure function that accepts props as an argument and returns a React element(JSX).
A class component requires you to extend from React.Component and create a render function that returns a React element. 
There is no render method used in functional components. React hooks provide a more concise way to manage state and side effects in functional components.

reactive programming
it is programming approach focuses on reactive to change and events in a declarative and asynchronous manner.

Unidirectional flow in react
In React JS, data flows in one direction, from Parent to Child. This helps components to be simple and predictable. 
Data passed through Props it's properties passed to a child component that can hold information.

Mounting in react
Mounting means putting elements into the DOM. It occurs when a component is first added to a page

Mounting vs render
Mounting occurs when a component is first added to the page, while rendering occurs when a component's state changes.

package.json vs package.lock.json
package.json is a metadata file. The “package.json” file defines the rules required to run your application and install dependencies. 
the “package-lock.json” file holds detailed information on all the dependencies on your project.

Function composition 
Combining multiple functions to create a new function.
    const multiplyBy2 = x => x * 2;
    const add3 = x => x + 3;
    const compose = (f, g) => x => f(g(x));
    const multiplyBy2ThenAdd3 = compose(add3, multiplyBy2);
    console.log(multiplyBy2ThenAdd3(5)); // Output: 13

React dom
ReactDOM is the JavaScript library that allows React to interact with the DOM. 

React dom server
The ReactDOMServer object enables you to render components to static markup (typically used on node server).
This object is mainly used for server-side rendering (SSR)

ReactMixins

Diffing algorithm is VDOM reconciliation process
React scripts  to run the build tools required to transform React JSX syntax into plain JavaScript programmatically


Use effect vs use layout effect 
useEffect() is asynchronous useLayoutEffect() synchronous 
useLayoutEffect() code always comes before useEffect() means before repainting html
useEffect() flickering or produce inaccurate results then useLayoutEffect() useful hook

render props
Another way of making components very reusable, is by using the render prop pattern. A render prop is a prop on a component, 
which value is a function that returns a JSX element. The component itself does not render anything besides the render prop. 
Instead, the component simply calls the render prop, instead of implementing its own rendering logic.
example see codesandbox

1.what are new tags of html5?
there are several tags. 
some of the tags are aside,article,datalist,canvas,date,datetime,audio,video,color inputs are some of new tags.

2.should we inject div tag inside of span tag?
yes, div is block scope and span is inline tag but schematically wrong it will break in production

3.5 ways center align  div tag?
flex box,grid,table css,margin css, position css
with position and without
div {
    width: 100px;
    height: 100px;
    background-color: red;
    
    position: absolute;
    top:0;
    bottom: 0;
    left: 0;
    right: 0;
    
    margin: auto;
}
.element {
  max-width: fit-content;
  margin-left: auto;
  margin-right: auto;
}
.element {
  max-width: fit-content;
  margin-inline: auto;  will set both m-left and m-right is auto
}
.container {
  display: flex;
  justify-content: center;
  align-items: center;
}
.container {
  display: grid;
  place-content: center;
}
4.px vs em vs rem?
px is absolute value and it is  fixed size
em is scalable elements that change size relative to parent element
rem is scalable responsive layout that  change size relative to root element

9.VDOM vs DOM?
DOM is document object modal and it represents document tree structure of HTML
React follows observable pattern
VDOM is memory representation of DOM means exact copy of DOM
if react changes state in component and it update VDOM but not in DOM.
after updating react compares previous version of VDOM and current version of VDOM
react knows exactly which nodes changed in VDOM.those nodes only changed in real DOM
this process is reconciliation process. it uses diffing algorithm. VDOM is faster because of making minimal manipulating operations on realDOM

10.component lifecycle methods and order?
there phases mounting and updating and unmounting
constructor
getderivedstatefromprops
shouldcomponentupdate
render
componentdidmount
componentdidupdate
componentwillunmount

11.pure components vs HOC components?
pure components work like functional components there is one difference that is shouldcomponentupdate lifecycle method.
it is checking on every render shallow comparison of state and props if it difference should render component other wise should not
HOC is component it takes another component as argument and returns new component. it is pattern from compositional nature
we don't modify components we create new ones
it is useful for code reuse
props manipulating
it is pure function. It ha no side effects. return new components only
for example show loading when user fetching data so wa can create HOC achieve it
react-redux --> connect
react-router--> withRouter
material-ui-->	withStyles(styles)(UserPage)

12.HOF functions?
HOF takes function as argument returns another function. they enable us abstract over actions not values
for example map,foreach,filter

13.state vs props vs ref?
state is object that stores information and owned by component and locally scoped
state can mutable via setState
props is object that have information
props passing down child components and it immutable
ref are accessing DOM elements without using selector methods of the document object
the main difference when state updates than component re-renders but in useRef we can access DOM elements without re-rendering component
ref create like useRef hook createRef using class-based components
use-cases of refs are maintaining input focus,text selection,media controls,outside dom,wth third party libraries
use ref persist data between renders

14.version of react?
react 18 features for automatic batch updates, useTransition startTransition  A transition is a new concept in React to distinguish between urgent and non-urgent updates.
support for Suspense on the server,New Strict Mode Behaviors, new hooks

16.Why it is Recommended to use Functional Components over Class Components?
simplicity
performance
code readability
easier to test
we can make stateful and lifecycle methods using hooks

17.Is the Shadow DOM the same as the Virtual DOM?
No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. designed for encapsulation
Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree this shadow DOM tree starts with a shadow root
const shadowOpen = elementRef.attachShadow({ mode: "open" });
const shadowClosed = elementRef.attachShadow({ mode: "closed" });
Shadow DOM is particularly useful when creating custom elements.
The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.

18.what are fragments?
group list of elements without adding extra node on DOM

19.react fiber?
Fiber is the new reconciliation engine or
re-implementation of core algorithm in React v16. 
The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or 
reuse work and assign priority to different types of updates and new concurrency primitives.

Cumulative layout shift
A layout shift happens when any element that is visible in the viewport changes its position between two frames.

20.how can maintaining data in complex ui?
using redux maintaining external global single store to achieve
contextAPI

21.two way data binding implementation?
use callback to achieve it

22.pure functions?
a function has always returns same if we pass same arguments. it is not depend on any state

25.what happens background when enter url and hit enter?
each website has ip than ip locate DNS server and DNS locates to web server then fetch website from server

26.what is hoisting and scope
Hoisting is a JavaScript mechanism where variables and function statements are moved to the top of their scope before code execution.
if we declared with var is hoisted and default value assigned as undefined
Function declarations are hoisted not function expressions.
Function hoisting allows us to call a function before it is defined
scope-- block scope if the variable is declared in code block that variable visible in that code block
lexical environment scope

27.service workers and pwa?
it is script that browser runs background separate from web page
service workers act as proxy between web browser and web server.
they aim to readability by providing offline access as well as boost web page performance
Service workers are at the core of progressive web applications.
pwa has modern web capability to delivery to app experience to users
pwa can run multiple platforms from single code base
pwa support offline and it will install on device and faster loading and user interactions

31.HTML entity
some characters are reserved in HTML we can show in web page we can use entity name or entity number ex &lt or &#60 to display < symbol
used for non-breaking space

32.input type submit vs button in html
<input type="submit"> cause the form data to be submitted to the server
<button> can have content, whereas <input> cannot (it is a null element).

34.callbacks vs HOF
A callback is a function that is passed as an argument to another function.

A higher order function is a function that takes function as an argument and returns a function as an output.
ex filter,map

38.What is Tree Shaking?
dead code elimination means if unused modules in application webpack will eliminate and not remove code 

39.Difference b/w dependency and devDependency
"dependencies" : Packages required by your application in production. 
"devDependencies" : Packages that are only needed for local development and testing.

40.npm vs npx
NPM is a package manager used to install, delete, and update Javascript packages on your machine. 
NPX is a package executer, and it is used to execute javascript packages directly, without installing them.

41.Difference between console.log(<HeaderComponent/>) and console.log(HeaderComponent())
Output of console.log(<HeaderComponent/>) is JSX syntax returns React element object
{
  type: HeaderComponent,
  props: {},
  key: null,
  ref: null,
}

console.log(HeaderComponent())
Output (JSX/React element):
{
  type: 'h1',
  props: { children: 'Hello, World!' },
  key: null,
  ref: null,
}

HeaderComponent(): Logs the result of directly calling the component function, which is the actual JSX/React element that the function returns. 

42. What if 2 components are given will the state change in one component will effect the other component’s state (child)?
yes,Every time some state changes in the parent component, it makes the child component to re render

43. What is the difference between a controlled and uncontrolled component?
Controlled components are those whose value is controlled by React state.
Uncontrolled components are those whose value is controlled by the DOM itself.


44.Difference b/w client-side routing and server-side routing?
Client-side routing is a technique that allows you to update the URL without reloading the page.
Server-side routing is a technique that allows you to update the page without reloading the page.

45.How does React handle routing and navigation?
 react-router-dom library
 React Router provides a <Link> component, which can be used for basic React navigation

50.block level element vs inline level element
block level element will take full width and height of the parent element
ex: <header>,<nav>,<section>,<article>,<aside>,<footer>,<main>
inline level element will take only the space required to display the content
ex: <a>,<span>,<strong>,<em>,<b>,,<label>,<img>,<input>,<br>,<script>

ssr vs csr
Server-side rendering (SSR) and client-side rendering (CSR) are two different ways to render web pages: 
Rendering process: SSR renders on the server, while CSR renders on the client. 
SEO: SSR is better for SEO because it sends a fully rendered HTML file to the client, which helps search engines analyze and rank the page. 
Initial page load time: SSR is faster because it delivers pre-rendered HTML content. CSR is slower because the browser needs to download JavaScript code to render the page. 
Interactivity: CSR is better for interactive user experiences because the rendering happens in the browser. 
Server load: CSR minimizes server load because the server only needs to serve the initial HTML file. 
Best use: SSR is better for static content, while CSR is better for dynamic content. 
The best choice depends on your project's needs, such as user experience, performance, and search engine visibility. 
In some cases, you can combine SSR and CSR, a technique called "hydration".

performance(senior engineer should know all things)
role based routing
testing
asynchronous tasks like api calls, events,promises,callbacks
reusability,modularity,readability,testability these keywords are used to describe the quality of a software code
styling,Accessibility

redux vs contextAPI
Context is not a "state management" tool. It's a Dependency Injection mechanism
Redux is a library and a pattern for separating your state update logic from the rest of your app
Context is a great tool by itself, and I use it frequently in my own apps. But, Context doesn't "replace Redux". 
https://www.reddit.com/r/reactjs/comments/z4y7sj/redux_vs_context_what_exactly_does_redux/ read article



Concurrency modal in js
it is a process of running multiple tasks at the same time. in js it is achieved by using the asynchronous programming and event loop 

tilde(~) and caret(^) in package.json

2.4.6 here 2 is major version, 4 is minor version, 6 is patch version(bug fixes,security patches)

Using a tilde (~) before the version number of the dependency package means 
that we will accept only further patch releases from the version specified
but will not receive any major or minor release if we were to install or update our dependency package.

"dependencies": {
    "express": "~4.17.0"
}

Using a caret (^) before the version number of the dependency package means 
that we can accept both patch and minor releases from the version specified
but will not receive any major release if we were to install or update our dependency package.

"dependencies": {
    "axios": "^1.2.0"
}

robots.txt file in public folder in react app
Robots.txt is a simple text file that sites in the root directory of your site.
It tells “robots” (such as search engine spiders) which pages to crawl on your site, which pages to ignore.
it improve for SEO 

public folder in react app
public folder is where you put the files that need to be publicly available, such as images, fonts, and other static files.
public folder are not processed by webpack
Images in the public folder are not processed by webpack and are simply copied to the build folder during the build process.
means that the images are not part of the final bundle and will not increase the size of your application.

In JavaScript, both pre-increment (++x) and post-increment (x++) operators increase the value of a variable by 1. However, they differ in when the increment happens and what value is returned:
Pre-increment (++x)
Increment first: The variable is incremented first, and then the new value is returned.
Example:
JavaScript

let x = 5;
let y = ++x;

console.log(x); // 6
console.log(y); // 6
Post-increment (x++)
Return first, increment later: The current value of the variable is returned first, and then the variable is incremented.
Example:
JavaScript

let x = 5;
let y = x++;

console.log(x); // 6
console.log(y); // 5
In summary:
Use pre-increment (++x): when you want to use the incremented value immediately.
Use post-increment (x++): when you want to use the original value before incrementing.

querySelector() vs getElementById()
querySelector()
The querySelector() function is used to retrieve an element from the document using a CSS selector.
 It returns the first element that matches the specified selector. 
 The selector can be any valid CSS selector, such as a class, id, or tag name.

getElementById()
The getElementById() function is used to retrieve an element from the document using its ID attribute. 
It returns the element with the specified ID.
IDs must be unique within a page, so getElementById() will always return one element or null if there is no matching element. 

getElementById() only works with ID attributes, while querySelector() can work with any CSS selector. 
Additionally, getElementById() is faster than querySelector() 
because it only needs to search for one element, 
whereas querySelector() may need to search for multiple elements before returning the first match.

async vs defer
async
The script executes as soon as it's downloaded, without waiting for the HTML parsing to complete. 
This means that the order of execution is not guaranteed.
defer
The script executes after the browser has fully processed the HTML, in the order they are in the HTML. 
Here are some other differences between async and defer:
When to use
Use async if the order of execution doesn't matter and the script doesn't modify the DOM. 
Use defer if the order is execution is important or the script modifies the DOM. 
Performance
Both attributes help you optimize the First Content-ful Paint metric. 
Browser support
Older browsers might not support defer, so your scripts might not load at all for some users. 
Inline scripts
These attributes don't work on inline scripts, which are scripts without a src attribute. 
