Why use react
It uses VDOM
It uses the component architecture
It uses a modularize component 
We can build complex UI easily
It has a view library only
it has vast community and ecosystem
it has reusability and composition
it uses declarative syntax
react hooks simplified ecosystem

VDOM disadvantages
Memory overhead:
Maintaining a separate VDOM requires memory, increasing the application's footprint.
Initial render overhead:
Creating and reconciling the VDOM during the initial render can be slower compared to direct DOM manipulation.
Complexity for VDOM concepts like reconciliation and diffing algorithm to understand
if applications with complex UIs or frequent updates performance issues rises. 
debugging DOM-related issues more challenging.

react disadvantages
it is view library not mvc architecture
Maintenance of application is hard if it is complex UI
Debugging challenges need more system resources
SEO challenges

What is the difference between state and props?
props are immutable and state is mutable
props are passed from parent to child and state is managed by component

reusability vs composition
reusability is create a component that can be used in multiple places. 
composition is combining reusable components together to build one big component. ex:App component

transpiler vs compiler
transpiler: converts code from one language to another language. ex: babel converts es6 to es5
compiler: converts code to machine readable format means high level programming language to low level machine code.

What is de-structure how can use arrays if the value change dynamic
de-structure is extract values from array/object and uses like variables

If two components shared the same username to display how will do in
saves in local storage

local storage vs session storage vs cookies
 	        Local Storage	    Session Storage	  Cookies
Capacity-->	5-10MB	          5MB	              4KB
Browsers-->	HTML 5	        HTML 5	          HTML 5 / HTML 4
Access      -->Any Window  Same Tab	      Any Window
performance--> synchronous  synchronous     asynchronous
Expiration-->	Never	On      Tab Close	      Manually Set 
Supported Data Types-->	String Only 	
Auto-expire Option-->	No	 Yes	             Yes
Storage Location-->	Browser Only	Browser Only	Browser and Server
Editable and Blockable by Users-->	Yes
SSL Support-->  	No	      No	                Yes

Which is better local storage or session storage?
If we want some data on the browser, we often utilize the local storage object. Cookies are used if we want them on the server.
session storage is used if we want to delete the data if the user closes that particular tab or the season

Is Async a sessionStorage?
No, localStorage and sessionStorage calls are synchronous


Rules of hooks 
hooks can only be called inside functional component
hooks can be top level of component
hooks cannot be conditional

Npm vs yarn
NPM fetches packages from the online npm registry for every 'install' command
YARN stores dependencies locally in most cases and fetches packages from a local disk.

What are React hooks? Explain the difference between useState and useEffect.
React hooks are functions that allow you to maintaining state and lifecycle features in functional components. 
useState is used to manage state, while useEffect is used to handle side effects like fetching data or subscribing to events.

Use context API
props passed to several components. this leads to prop drilling. 
avoid prop drilling use contextAPI allows data to be passed through a component tree without having to pass props manually at every level
createContext:function returns an object with provider and consumer properties
Context API consists of two main components:  provider and consumer
The provider is responsible for creating and managing the context, which holds the data
the consumer is used to access the context and its data from provide component
 
Code Example:
const ThemeContext = createContext();

function App() {
 return (
 <ThemeContext.Provider value="dark">
 <Component />
 </ThemeContext.Provider>
 );
}

function Component() {
 const theme = useContext(ThemeContext);
 // Use theme value here
}


custom hook
when you have component logic to be used by multiple components. we can extract logic place in custom hook.
the hook start with name 'useFetch' 'useOnline'  like  
 
props.children
children are a special prop that is used to pass the data from the parent component to the children component 
but this data must be enclosed within the parent’s opening and closing tag.

const Picture = (props) => {
  return (
    <div>
      <img src={props.src}/>
      {props.children}
    </div>
  )
}

//App.js
render () {
  return (
    <div className='container'>
      <Picture key={picture.id} src={picture.src}>
          //what is placed here is passed as props.children  
      </Picture>
    </div>
  )
}

How can you optimize performance in a React application? Discuss techniques like memoization, code splitting, and lazy loading.
Performance optimization techniques include memoization with useMemo for avoid unnecessary recalculations, 
code splitting to split the bundle into smaller chunks we can use webpack and load components when needed. we can use lay loading and Suspense
react.lazy is function that allows you to load component lazily. it enables code splitting to import component asynchronous/dynamically.
Suspense is used to define loading state and render fallback UI while component is loading.
pros and cons of code splitting
faster initial loading, optimized bandwidth usage,improve caching, parallel loading,easier maintaining
complexity, tooling dependency, potential for run time errors,increased number of requests

useCallback and useMemo
useCallback and useMemo are both React Hooks that help optimize the performance of a React application by memoizing technique.

When you define a function inside a component, it is recreated on every render, even if the component’s state or props have not changed. 
This can lead to unnecessary re-renders, which can slow down your application’s performance. 
The useCallback hook helps you avoid this problem by memoizing the function and only recreating it when necessary.
When you need to pass a function as props to a child component.
If you have a function that is expensive to compute and you need to call it in multiple places.
When dealing with functional components.
When you are working with a function that relies on external data or state.
The useCallback hook takes two arguments: a function and a dependency array. 
It will return a memoized version of the function that only changes if one of the dependencies has changed.
useMemo is used to memoize values or computations, helping to optimize expensive calculations or data transformations.u
useCallback returns a memoized callback function, while useMemo returns a memoized value.
useCallback(callback, dependencies)

What is the hook? Life cycle methods vs hooks
React hooks are functions that allow you to use state and lifecycle features in functional components. 
Hooks can be stateful and can manage side effects. React hooks provide a more concise way to manage state and side effects in functional components. 
Lifecycle methods are only available in class components

functional components vs class Components
A functional component is just a plain JavaScript pure function that accepts props as an argument and returns a React element(JSX).
A class component requires you to extend from React.Component and create a render function that returns a React element. 
There is no render method used in functional components. React hooks provide a more concise way to manage state and side effects in functional components.

reactive programming
it is programming approach focuses on reactive to change and events in a declarative and asynchronous manner.

Unidirectional flow in react
In React JS, data flows in one direction, from Parent to Child. This helps components to be simple and predictable. 
Data passed through Props it's properties passed to a child component that can hold information.

Mounting in react
Mounting means putting elements into the DOM. It occurs when a component is first added to a page

Mounting vs render
Mounting occurs when a component is first added to the page, while rendering occurs when a component's state changes.

package.json vs package.lock.json
package.json is a metadata file. The “package.json” file defines the rules required to run your application and install dependencies. 
the “package-lock.json” file holds detailed information on all the dependencies on your project.

Function composition 
Combining multiple functions to create a new function.
    const multiplyBy2 = x => x * 2;
    const add3 = x => x + 3;
    const compose = (f, g) => x => f(g(x));
    const multiplyBy2ThenAdd3 = compose(add3, multiplyBy2);
    console.log(multiplyBy2ThenAdd3(5)); // Output: 13

React dom
ReactDOM is the JavaScript library that allows React to interact with the DOM. 

React dom server
The ReactDOMServer object enables you to render components to static markup (typically used on node server).
This object is mainly used for server-side rendering (SSR)

ReactMixins

Diffing algorithm is VDOM reconciliation process
React scripts  to run the build tools required to transform React JSX syntax into plain JavaScript programmatically


Use effect vs use layout effect 
useEffect() is asynchronous useLayoutEffect() synchronous 
useLayoutEffect() code always comes before useEffect() means before repainting html
useEffect() flickering or produce inaccurate results then useLayoutEffect() useful hook

render props
Another way of making components very reusable, is by using the render prop pattern. A render prop is a prop on a component, 
which value is a function that returns a JSX element. The component itself does not render anything besides the render prop. 
Instead, the component simply calls the render prop, instead of implementing its own rendering logic.
example see codesandbox

VDOM vs DOM?
DOM is document object modal and it represents document tree structure of HTML
React follows observable pattern
VDOM is memory representation of DOM means exact copy of DOM
if react changes state in component and it update VDOM but not in DOM.
after updating react compares previous version of VDOM and current version of VDOM
react knows exactly which nodes changed in VDOM.those nodes only changed in real DOM
this process is reconciliation process. it uses diffing algorithm. VDOM is faster because of making minimal manipulating operations on realDOM

component lifecycle methods and order?
there phases mounting and updating and unmounting
constructor
getderivedstatefromprops
shouldcomponentupdate
render
componentdidmount
componentdidupdate
componentwillunmount

pure components vs HOC components?
pure components work like functional components there is one difference that is shouldcomponentupdate lifecycle method.
it is checking on every render shallow comparison of state and props if it difference should render component other wise should not
HOC is component it takes another component as argument and returns new component. it is pattern from compositional nature
we don't modify components we create new ones
it is useful for code reuse
props manipulating
it is pure function. It ha no side effects. return new components only
for example show loading when user fetching data so wa can create HOC achieve it
react-redux --> connect
react-router--> withRouter
material-ui-->	withStyles(styles)(UserPage)


state vs props vs ref?
state is object that stores information and owned by component and locally scoped
state can mutable via setState
props is object that have information
props passing down child components and it immutable
ref are accessing DOM elements without using selector methods of the document object
the main difference when state updates than component re-renders but in useRef we can access DOM elements without re-rendering component
ref create like useRef hook createRef using class-based components
use-cases of refs are maintaining input focus,text selection,media controls,outside dom,wth third party libraries
use ref persist data between renders

version of react?
react 18 features for automatic batch updates, useTransition startTransition  A transition is a new concept in React to distinguish between urgent and non-urgent updates.
support for Suspense on the server,New Strict Mode Behaviors, new hooks

Why it is Recommended to use Functional Components over Class Components?
simplicity
performance
code readability
easier to test
we can make stateful and lifecycle methods using hooks

Is the Shadow DOM the same as the Virtual DOM?
No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. designed for encapsulation
Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree this shadow DOM tree starts with a shadow root
const shadowOpen = elementRef.attachShadow({ mode: "open" });
const shadowClosed = elementRef.attachShadow({ mode: "closed" });
Shadow DOM is particularly useful when creating custom elements.
The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.

18.what are fragments?
group list of elements without adding extra node on DOM

19.react fiber?
Fiber is the new reconciliation engine or
re-implementation of core algorithm in React v16. 
The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or 
reuse work and assign priority to different types of updates and new concurrency primitives.

how can maintaining data in complex ui?
using redux maintaining external global single store to achieve
contextAPI

two way data binding implementation?
use callback to achieve it

what is the difference between controlled and uncontrolled components?
Controlled components are those whose value is controlled by React state.
Uncontrolled components are those whose value is controlled by the DOM itself.

27.service workers and pwa?
it is script that browser runs background separate from web page
service workers act as proxy between web browser and web server.
they aim to readability by providing offline access as well as boost web page performance
Service workers are at the core of progressive web applications.
pwa has modern web capability to delivery to app experience to users
pwa can run multiple platforms from single code base
pwa support offline and it will install on device and faster loading and user interactions

38.What is Tree Shaking?
dead code elimination means if unused modules in application webpack will eliminate and not remove code 

39.Difference b/w dependency and devDependency
"dependencies" : Packages required by your application in production. 
"devDependencies" : Packages that are only needed for local development and testing.

40.npm vs npx
NPM is a package manager used to install, delete, and update Javascript packages on your machine. 
NPX is a package executer, and it is used to execute javascript packages directly, without installing them.

41.Difference between console.log(<HeaderComponent/>) and console.log(HeaderComponent())
Output of console.log(<HeaderComponent/>) is JSX syntax returns React element object
{
  type: HeaderComponent,
  props: {},
  key: null,
  ref: null,
}

console.log(HeaderComponent())
Output (JSX/React element):
{
  type: 'h1',
  props: { children: 'Hello, World!' },
  key: null,
  ref: null,
}

HeaderComponent(): Logs the result of directly calling the component function, which is the actual JSX/React element that the function returns. 

42. What if 2 components are given will the state change in one component will effect the other component’s state (child)?
yes,Every time some state changes in the parent component, it makes the child component to re render

44.Difference b/w client-side routing and server-side routing?
Client-side routing is a technique that allows you to update the URL without reloading the page.
Server-side routing is a technique that allows you to update the page without reloading the page.

45.How does React handle routing and navigation?
 react-router-dom library
 React Router provides a <Link> component, which can be used for basic React navigation

ssr vs csr
Server-side rendering (SSR) and client-side rendering (CSR) are two different ways to render web pages: 
Rendering process: SSR renders on the server, while CSR renders on the client. 
SEO: SSR is better for SEO because it sends a fully rendered HTML file to the client, which helps search engines analyze and rank the page. 
Initial page load time: SSR is faster because it delivers pre-rendered HTML content. CSR is slower because the browser needs to download JavaScript code to render the page. 
Interactivity: CSR is better for interactive user experiences because the rendering happens in the browser. 
Server load: CSR minimizes server load because the server only needs to serve the initial HTML file. 
Best use: SSR is better for static content, while CSR is better for dynamic content. 
The best choice depends on your project's needs, such as user experience, performance, and search engine visibility. 
In some cases, you can combine SSR and CSR, a technique called "hydration".

performance(senior engineer should know all things)
role based routing
testing
asynchronous tasks like api calls, events,promises,callbacks
reusability,modularity,readability,testability these keywords are used to describe the quality of a software code
styling,Accessibility

redux vs contextAPI
Context is not a "state management" tool. It's a Dependency Injection mechanism
Redux is a library and a pattern for separating your state update logic from the rest of your app
Context is a great tool by itself, and I use it frequently in my own apps. But, Context doesn't "replace Redux". 
https://www.reddit.com/r/reactjs/comments/z4y7sj/redux_vs_context_what_exactly_does_redux/ read article



Concurrency modal in js
it is a process of running multiple tasks at the same time. in js it is achieved by using the asynchronous programming and event loop 

tilde(~) and caret(^) in package.json

2.4.6 here 2 is major version, 4 is minor version, 6 is patch version(bug fixes,security patches)

Using a tilde (~) before the version number of the dependency package means 
that we will accept only further patch releases from the version specified
but will not receive any major or minor release if we were to install or update our dependency package.

"dependencies": {
    "express": "~4.17.0"
}

Using a caret (^) before the version number of the dependency package means 
that we can accept both patch and minor releases from the version specified
but will not receive any major release if we were to install or update our dependency package.

"dependencies": {
    "axios": "^1.2.0"
}

robots.txt file in public folder in react app
Robots.txt is a simple text file that sites in the root directory of your site.
It tells “robots” (such as search engine spiders) which pages to crawl on your site, which pages to ignore.
it improve for SEO 

public folder in react app
public folder is where you put the files that need to be publicly available, such as images, fonts, and other static files.
public folder are not processed by webpack
Images in the public folder are not processed by webpack and are simply copied to the build folder during the build process.
means that the images are not part of the final bundle and will not increase the size of your application.

what is react? how different from angular?
React is a JavaScript library for building user interfaces. It focuses on creating reusable UI components and managing how data flows through your application.
Key React Concepts
React uses a component-based architecture where you build encapsulated components that manage their own state. It employs a "virtual DOM" - a JavaScript representation of the actual DOM that React uses to efficiently update only the parts of the page that have changed. React follows a unidirectional data flow, meaning data flows down from parent to child components through props.
Main Differences from Angular
Architecture Philosophy: React is a library focused specifically on the view layer, while Angular is a full framework that provides a complete solution including routing, HTTP client, forms handling, and more out of the box.
Learning Curve: React has a gentler learning curve since react start with just the basics and add complexity gradually. Angular has a steeper initial learning curve due to its comprehensive nature and concepts like dependency injection, decorators, and TypeScript (though TypeScript is optional in React).
Language: React works with JavaScript or TypeScript (optional), while Angular is built with TypeScript from the ground up, though you can technically use JavaScript.
Data Binding: React uses one-way data binding with explicit state management, while Angular supports both one-way and two-way data binding natively.
Structure: React gives you more flexibility in how you structure your application and what additional libraries you use. Angular provides a more opinionated, structured approach with built-in conventions.
Size and Performance: React tends to have a smaller bundle size for simple applications, while Angular applications can be larger but come with more built-in functionality.
Both are excellent choices - React offers more flexibility and is easier to start with, while Angular provides a more complete, enterprise-ready framework with stronger conventions.

what are different ways to make API calls on react?
1. Fetch API (Built-in Browser API)
2. Axios (Popular HTTP client library)
3. React Query/TanStack Query (Data fetching and caching library)
4. SWR (Stale-While-Revalidate data fetching library)
5. GraphQL (Query language for APIs, often used with Apollo Client)
6. Redux Thunk or Redux Saga (Middleware for handling asynchronous actions in Redux)
7. Custom Hooks (Creating reusable hooks for API calls)

Explain react work flow and why its called single page application with one way data binding?
1. **Component-Based Architecture**: React applications are built using components, which are reusable pieces of UI that can manage their own state and props. Components can be nested within each other to create complex UIs.
2. **Virtual DOM**: React uses a virtual DOM to optimize rendering performance. When the state of a component changes, React creates a new virtual DOM representation of the UI and compares it with the previous version (diffing algorithm). It then updates only the parts of the actual DOM that have changed, minimizing direct manipulation of the DOM.
Reconciliation Process:
   - When a component's state or props change, React re-renders that component and its children.
   - It creates a new virtual DOM tree and compares it with the previous one to identify changes.
   - Only the changed elements are updated in the actual DOM, which improves performance.
3. **One-Way Data Binding**: In React, data flows in one direction, from parent components to child components through props. This means that when a parent component's state changes, it can pass new data down to its children, but children cannot directly modify the parent's state. Instead, they can communicate changes back to the parent through callback functions.
Predictable Data Flow: You always know where data is coming from and where changes originate.
Easier Debugging: When something goes wrong, you can trace the data flow linearly.
Better Performance: React can optimize rendering because it knows exactly what changed and where.
Explicit State Management: You must explicitly handle state changes, making your code more intentional.
4. **Single-Page Application (SPA)**: React applications are often built as SPAs, meaning that the entire application runs on a single HTML page. When users navigate through the app, React dynamically updates the UI without requiring a full page reload. This results in a smoother user experience and faster interactions. Reduced server load
Easier to build complex interactions Persistent State: Application state persists across "page" changes since the page never actually reloads
5. **State Management**: Components can manage their own local state using the `useState` hook or class component state. For more complex applications, state management libraries like Redux or Context API can be used to manage global state across components.

how can you pass data child to parent in react with example?
In React, you can pass data from a child component to a parent component using callback functions. The parent component defines a function that updates its state, and it passes this function down to the child component as a prop. The child component can then call this function with the data it wants to send back to the parent.

Example:
import React, { useState } from 'react';
function ParentComponent() {
  const [childData, setChildData] = useState("");

  const handleDataFromChild = (data) => {
    setChildData(data);
  };

  return (
    <div>
      <h1>Data from Child: {childData}</h1>
      <ChildComponent onSendData={handleDataFromChild} />
    </div>
  );
}

function ChildComponent({ onSendData }) {
  const sendData = () => {
    onSendData("Hello from Child");
  };

  return <button onClick={sendData}>Send Data to Parent</button>;
}

how class component differ from functional component?
Class components and functional components are two ways to define components in React, each with its own characteristics:

1. **Syntax**:
   - Class components are defined using ES6 class syntax and extend the `React.Component` class.
   - Functional components are defined as JavaScript functions (either regular or arrow functions).

2. **State Management**:
   - Class components can hold and manage their own state using `this.state` and `this.setState()`.
   - Functional components use the `useState` hook (and other hooks) to manage state.

3. **Lifecycle Methods**:
   - Class components have access to lifecycle methods (e.g., `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`) to run code at specific points in a component's life.
   - Functional components use the `useEffect` hook to achieve similar behavior.

4. **Performance**:
   - Functional components are generally more lightweight and can be more performant, especially with React's optimizations like memoization.
   - Class components may have more overhead due to the class structure and lifecycle methods.

5. **Hooks**:
   - Class components cannot use hooks.
   - Functional components can use hooks, allowing for more reusable and composable logic.

Overall, functional components are now the preferred way to write components in React, especially with the introduction of hooks in React 16.8, which allow functional components to manage state and side effects.
When to Use Each
Class Components
Working with legacy codebases
When you need error boundaries (though hooks version exists)
Complex lifecycle logic that's hard to split

Functional Components
When you want to take advantage of hooks
For simpler components without complex state management
When you prefer a more concise and readable syntax

what is context API? can we have multiple providers using context API?
Context API is a React feature that allows you to share data across multiple components without having to pass props down through every level of the component tree. It's designed to solve the "prop drilling" problem.
Yes, you can have multiple providers using the Context API. Each provider can hold its own state and provide it to the components within its subtree. This is useful for organizing your application's state and avoiding prop drilling.
// 1. Create Context
import React, { createContext, useContext, useState } from 'react';

const ThemeContext = createContext();

// 2. Create Provider Component
function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
  };
  
  const value = {
    theme,
    toggleTheme
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

// 3. Custom Hook for easier usage
function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

// 4. Using the Context
function App() {
  return (
    <ThemeProvider>
      <Header />
      <MainContent />
      <Footer />
    </ThemeProvider>
  );
}


function MainContent() {
  const { theme } = useTheme();
  
  return (
    <main style={{ 
      background: theme === 'light' ? '#f5f5f5' : '#222',
      color: theme === 'light' ? '#333' : '#fff'
    }}>
      <p>Current theme: {theme}</p>
    </main>
  );
}

what is render props in react?
Render props is a pattern in React where a component uses a prop that is a function to control what gets rendered. This allows for greater flexibility and reusability of components by enabling them to share code and logic without tightly coupling them.
The function passed as a prop can return any JSX, allowing the parent component to dictate how the child component should render its content.
Here's a simple example of how render props work:
```jsx
import React from 'react';

function DataFetcher({ render }) {
  const data = "Hello from DataFetcher";
  return render(data);
}

function App() {
  return (
    <div>
      <h1>Render Props Example</h1>
      <DataFetcher render={data => <p>{data}</p>} />
    </div>
  );
}

export default App;
Why Use Render Props?
Share behavior across components.

Avoid code duplication.

Replace or enhance traditional HOCs (Higher-Order Components).

What are the advantages and disadvantages of using render props?
Advantages:
- Flexibility: Allows for dynamic rendering based on the data passed to the render prop.
- Reusability: Enables sharing of logic and behavior across components without tightly coupling them.
- Avoids prop drilling: Helps in passing data down the component tree without needing to pass props through every level.
Disadvantages:
- Complexity: Can make the code harder to read and understand, especially for developers unfamiliar with the pattern.- Performance: If not used carefully, it can lead to unnecessary re-renders, as the render prop function is called on every render.
- Naming Confusion: The term "render prop" can be confusing for developers who are not familiar with the pattern, leading to potential misunderstandings in codebases.
- Overhead: It can introduce additional complexity in the component structure, making it harder to maintain if overused. 

write custom input hook to reusable?
import { useState } from 'react';
function useInput(initialValue = '') {
  const [value, setValue] = useState(initialValue);
  const handleChange = (event) => {
    setValue(event.target.value);
  };
  return {
    value,
    onChange: handleChange
  };
}
// Usage in a component
import React from 'react';
import useInput from './useInput'; 
function MyComponent() {
  const nameInput = useInput('');
  const emailInput = useInput('');

  return (
    <div>
      <input type="text" placeholder="Name" {...nameInput} />
      <input type="email" placeholder="Email" {...emailInput} />
      <p>Name: {nameInput.value}</p>
      <p>Email: {emailInput.value}</p>
    </div>
  );
}
export default MyComponent;

what is compound component pattern?
Compound components are a design pattern in React that allows you to create a set of components that work together as a single unit. This pattern is useful for building reusable and composable components that can share state and behavior without tightly coupling them.
The key idea is to create a parent component that manages the shared state and behavior, while child components can access this state and behavior through context or props. This allows for greater flexibility and reusability of components.
Here's a simple example of how compound components work:
```jsx
import React, { createContext, useContext, useState } from 'react';
const TabsContext = createContext();
function Tabs({ children }) {
  const [activeTab, setActiveTab] = useState(0);
  const value = { activeTab, setActiveTab };
  
  return (
    <TabsContext.Provider value={value}>
      <div className="tabs">{children}</div>
    </TabsContext.Provider>
  );
}
function TabList({ children }) {
  return <div className="tab-list">{children}</div>;
}
function Tab({ index, children }) { 
  const { activeTab, setActiveTab } = useContext(TabsContext);
  
  return (
    <button
      className={`tab ${activeTab === index ? 'active' : ''}`}
      onClick={() => setActiveTab(index)}
    >
      {children}
    </button>
  );
}
function TabPanel({ index, children }) {
  const { activeTab } = useContext(TabsContext);
  return (
    <div className={`tab-panel ${activeTab === index ? 'active' : ''}`}>
      {children}
    </div>
  );
}
```
export default function App() {
  return (
    <Tabs>
      <TabList>
        <Tab index={0}>Tab 1</Tab>
        <Tab index={1}>Tab 2</Tab>
        <Tab index={2}>Tab 3</Tab>
      </TabList>
      <TabPanel index={0}>Content for Tab 1</TabPanel>
      <TabPanel index={1}>Content for Tab 2</TabPanel>
      <TabPanel index={2}>Content for Tab 3</TabPanel>
    </Tabs>
  );
}

error boundaries in react
Error boundaries are a React feature that allows you to catch JavaScript errors in your component tree and display a fallback UI instead of crashing the entire application. They are implemented using class components that define specific lifecycle methods.
Error boundaries can catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.
Here's how to create an error boundary:
```jsx
import React from 'react';
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    console.error("Error caught by Error Boundary:", error, errorInfo);
  }
  render() {  
    if (this.state.hasError) {
      // Fallback UI
      return <h1>Something went wrong.</h1>;
    }
    return this.props.children; 
  }
}

what is service worker in react?
A service worker is a script that runs in the background of a web application, separate from the main browser thread. It allows you to intercept network requests, cache resources, and enable offline functionality. Service workers are a key part of Progressive Web Apps (PWAs) and can significantly enhance the performance and user experience of your application.
Service workers can handle tasks like caching assets, serving cached content when offline, and managing push notifications. 

unit tests in react example?

Here's a simple example of a unit test for a React component using Jest and React Testing Library:
```jsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import MyButton from './MyButton'; // Assuming you have a MyButton component
describe('MyButton Component', () => {
  test('renders with correct text', () => {
    render(<MyButton text="Click Me" />);
    const buttonElement = screen.getByText("click me");
    expect(buttonElement).toBeInTheDocument();
  });

  test('calls onClick handler when clicked', () => {
    const handleClick = jest.fn();
    render(<MyButton text="Click Me" onClick={handleClick} />);
    const buttonElement = screen.getByText("click me");
    fireEvent.click(buttonElement);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```
Atomic Design in React
Atomic Design is a methodology for creating design systems that emphasizes breaking down user interfaces into smaller, reusable components. It consists of five distinct levels:
1. **Atoms**: The smallest building blocks of a design system, such as buttons, input fields, and labels. They are simple components that cannot be broken down further.
2. **Molecules**: Combinations of atoms that form a functional unit, such as a search bar that includes an input field and a button.
3. **Organisms**: More complex components that consist of multiple molecules and/or atoms, such as a header that includes a logo, navigation links, and a search bar.
4. **Templates**: Page-level components that define the layout and structure of a page, using organisms to create a cohesive design.
5. **Pages**: Specific instances of templates that include real content, such as a product page or a user profile page.
Atomic Design helps create a consistent and scalable design system by promoting reusability and modularity in component development. It allows designers and developers to work together more effectively by providing a common language and structure for building user interfaces.